############################
## This file defines the tokens and other related
## things about the quinoa programming language
## Desgined to be ran by the custom generator
##
## To update the definitions used by the program
## run `./scripts/generateTokenDefinitions.py`
## from the root directory
############################

###########################################
## each token can have various directives associated with it
## A Directive is prefixed by an @ symbol
## A Directive Followed By a value is interpreted as a Property
## A Directive with no value is associated with a boolean
###########################################

###############################
## DIRECTIVES ##
###############################
## alias: Source-Code Representation of the token, may have multiple (i.e @alias byte u8)
## infix: Used with operator to specify an infix operator
## prefix: Used with operator to specify an prefix operator
## type: Used to specify that a token is also a type
## ind: Specify that a token is used as a form of indentation
## dind: Specify that a token is used as a form of de-indentation
#################################
notoken
eof

comment

identifier

# Literal Definitions
literal_str

@alias true
literal_true

@alias false
literal_false

literal_int

literal_float

literal_string

literal_char

# Type Definitions

@alias void
@type void
void

@alias bool
@type integer
boolean

@alias string
@type pointer
string

@alias i8 char
@type integer
int8

@alias i16
@type integer
int16

@alias i32 int
@type integer
int32

@alias i64
@type integer
int64

@alias u8 byte
@type integer
uint8

@alias u16
@type integer
uint16

@alias u32 uint
@type integer
uint32

@alias u64
@type integer
uint64

@alias f16
@type floating_point
float16

@alias f32
@type floating_point
float32

@alias f64 float
@type floating_point
float64

@alias "
double_quote

@alias #
hashtag

@alias '
quote
# Scoping Symbols

@alias (
@ind
l_paren

@alias )
@dind
r_paren

@alias {
@ind
l_brace

@alias }
@dind
r_brace

@alias [
@ind
l_square_bracket

@alias ]
@dind
r_square_bracket

# Symbols And Stuff

@alias ,
comma

@alias :
colon

@alias ;
semicolon

@alias ?
question_mark

@alias @
at_symbol

@alias \
backslash

@infix 5
@alias %
percent

@infix 5
@alias **
powerOf

@postfix 3
@prefix 3
@alias ++
increment

@postfix 3
@prefix 3
@alias --
decrement

@alias +=
@infix 16
increment_by

@alias -=
@infix 16
decrement_by

@alias *=
@infix 16
mul_by

@alias /=
@infix 16
div_by

@alias **=
@infix 16
pow_of

@alias <<=
@infix 16
bitwise_shl_by

@alias >>=
@infix 16
bitwise_shr_by

@alias |=
@infix 16
bitwise_or_by

@alias &=
@infix 16
bitwise_and_by

@alias ^=
@infix 16
bitwise_xor_by

@postfix 2
subscript

# Unary Operators

@prefix 3
@alias create
instantiate_object

@prefix 3
@alias !
bang

# Binary Operators

@alias *
@infix 5
star

@alias +
@infix 6
plus

@alias -
@infix 6
minus

@alias ||
@infix 15
bool_or

@alias &&
@infix 14
bool_and

# Property Access will be treated as an expression
@alias .
@infix 4
dot

@alias /
@infix 5
slash

@alias <
@infix 9
lesser

@alias >
@infix 9
greater

@alias <=
@infix 9
lesser_eq

@alias >=
@infix 9
greater_eq

@alias =
@infix 16
assignment

@alias ==
@infix 10
equals

@alias !=
@infix 10
not_equals

@infix 11
@alias &
bitwise_and

@alias |
@infix 13
bitiwse_or

@alias ~
@infix 3
bitwise_not

@alias ^
@infix 13
bitwise_xor

@alias <<
@infix 7
bitwise_shl

@alias >>
@infix 7
bitwise_shr

@alias _
underscore

# Control Flow Shennanigans
@alias if
if

@alias while
while

@alias for
for

@alias break
break

@alias continue
continue

@alias switch
switch

@alias case
case

@alias fallthrough
fallthrough

@alias import
import

@alias module
module

@alias is
is

@alias as
as

@alias return
return
