//
// This module is responsible for exposing the entire C posix api
//
// Reference:
// https://www.mkompf.com/cplus/posixlist.html

//



module Posix is Exported{
  

  //
  // Commonly used aliases in libc
  // nolibc/std.h
  //
  type dev_t     = u64;
  type ino_t     = u64;
  type mode_t    = u32;
  type pid_t     = i32;
  type uid_t     = u32;
  type gid_t     = u32;
  type nlink_t   = u64;
  type off_t     = i64;
  type blksize_t = i64;
  type blkcnt_t  = i64;
  type time_t    = i64;
  type cstr      = *char;
  type buf       = *byte;

  const SEEK_SET : i32 = 0;
  const SEEK_END : i32 = 1;
  const SEEK_CUR : i32 = 2;

  //
  // FILE AND DIRECTORY RELATED FUNCTIONS
  //


  type timespec = struct{
    sec  : i64;
    usec : i64;
  };

  type FileStats = struct{
    dev : u64;
    ino : u64;
    nlink: u64;
    mode: u32;
    uid: u32;
    gid: u32;
    __pad0: i32;
    rdev: u64;
    size: i64;
    blksize: i64;
    blocks: i64;
    atim  : timespec;
    mtim  : timespec;
    ctim  : timespec;
    __glibc_reserved : [3]i64; 
  };
  type UTimeBuf  =  struct{};
  type Directory = struct{};
  type File      = struct{};

  #[link_extern "getcwd"]
  func get_cwd(buf: cstr, buf_len: u64) -> cstr;

  #[link_extern "mkdir"]
  func make_dir(path_name: cstr, mode: mode_t) -> i32;

  #[link_extern "rmdir"]
  func remove_dir(path_name: cstr) -> i32;

  #[link_extern "chdir"]
  func change_dir(path: cstr) -> i32;

  #[link_extern "link"]
  func link(old_path : cstr, new_path : cstr) -> i32;

  #[link_extern "unlink"]
  func unlink(path_name : cstr) -> i32;

  #[link_extern "rename"]
  func rename_file(old_path : cstr, new_path : cstr) -> i32;

  #[link_extern "stat"]
  func file_stat(file_name : cstr, buf : *FileStats) -> i32;

  #[link_extern "chmod"]
  func file_chmod(file_name : cstr, mode : mode_t) -> i32;

  #[link_extern "chown"]
  func file_chown(file_name : cstr, owner : uid_t, group : gid_t) -> i32;

  #[link_extern "utime"]
  func utime(file_name : cstr, buf : *UTimeBuf) -> i32;

  #[link_extern "opendir"]
  func open_dir(name : cstr) -> *Directory;

  #[link_extern "closedir"]
  func close_dir(dir : *Directory) -> i32;

  #[link_extern "rewinddir"]
  func rewind_dir(dir : *Directory);


  //
  // ADVANCED FILE OPERATIONS
  //

  #[link_extern "access"]
  func file_permissions(pathname : cstr, mode : u32) -> i32;

  #[link_extern "open"]
  func open_file(pathname : cstr, flags : u32, mode : mode_t) -> i32;

  #[link_extern "creat"]
  func create_file(pathname : cstr, mode : mode_t);

  #[link_extern "close"]
  func close_file(fd : i32) -> i32;

  #[link_extern "read"]
  func read_file(fd : i32, buffer : buf, read_count : u64) -> i64;

  #[link_extern "write"]
  func write_file(fd : i32, buffer : buf, write_count : u64) -> i64;

  #[link_extern "fcntl"]
  func fcntl(fd : i32, cmd : i32) -> i32;

  #[link_extern "fstat"]
  func file_stat(fd : i32, buf : *FileStats) -> i32;

  #[link_extern "lseek"]
  func seek_file(fd : i32, offset : off_t, whence : i32) -> off_t;

  #[link_extern "dup"]
  func dup_file(fd : i32) -> i32;

  #[link_extern "dup2"]
  func dup_file(old_fd : i32, new_fd : i32) -> i32;

  #[link_extern "pipe"]
  func create_pipe(filedes : [2]i32) -> i32;

  #[link_extern "mkfifo"]
  func create_fifo_pipe(path_name : cstr, mode : mode_t) -> i32;

  #[link_extern "umask"]
  func umask(mask : mode_t) -> mode_t;


  #[link_extern "fdopen"]
  func open_fd(fd : i32, mode : cstr) -> *File;

  #[link_extern "fileno"]
  func get_file_fd(stream : *File) -> i32;

  //
  // PROCESSES
  //
  #[link_extern "fork"]
  func create_process() -> pid_t;

  // We can only use the execv* class of functions
  // since quinoa does not support c-style var-args
  
  #[link_extern "execv"]
  func exec(path : cstr, args : *cstr) -> i32;

  #[link_extern "execve"]
  func exec_env(path_name : cstr, argv : *cstr, envp : *cstr) -> i32;

  #[link_extern "execvp"]
  func exec_path(path_name : cstr, argv : *cstr) -> i32;

  #[link_extern "execvpe"]
  func exec_path_env(file : cstr, argv : *cstr, envp : *cstr) -> i32;

  #[link_extern "waitpid"]
  func process_wait(pid : pid_t, status : *i32, options : i32) -> pid_t;

  #[link_extern "_exit"]
  func process_exit(status : i32);

  #[link_extern "kill"]
  func process_kill(pid : pid_t, sig : i32) -> i32;

  #[link_extern "sleep"]
  func sleep(seconds : i32) -> u32;

  #[link_extern "pause"]
  func pause() -> i32;

  #[link_extern "alarm"]
  func alarm(seconds : u32) -> u32;

  #[link_extern "setuid"]
  func set_uid(uid : uid_t) -> i32;

  #[link_extern "setgid"]
  func set_gid(gid : gid_t) -> i32;


}
