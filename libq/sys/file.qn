import @sys::posix;
import @lang::internal::error as Err;
module File is Exported{

    type _ = struct{
        fd : u32;
        is_open : bool;
    };


    func write.File(data : byte[]) -> u64{

        if(!(self.is_open)){
            return -1;
        }
        
        let return_value = posix::write_file(self.fd, data.ptr, data.len);
        if(return_value == -1){
          Err::panic("Failed to write to file");
        }
        
        return return_value as u64;
    }


    func close.File(){
        self.is_open = false;
        posix::close_file(self.fd);
    }

    func read.File(buffer : byte[]){
      let read_count = posix::read_file(self.fd, buffer.ptr, buffer.len); 
    }

    func from_descriptor( fd : u32 ) -> File{
        return File{
            fd : fd;
            is_open : true;
        };
    }

}
