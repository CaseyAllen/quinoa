import @sys::posix as posix;
import @lang::internal::error as Err;
module File is Exported{

    type _ = struct{
        fd : u32;
        is_open : bool;
    };


    func write.File(data : []byte) -> u64{

        if(!(self.is_open)){
            return -1;
        }
        
        let return_value = posix::write_file(self.fd, data.ptr, data.len);
        if(return_value == -1){
          Err::panic("Failed to write to file");
        }
        
        return return_value as u64;
    }


    func close.File(){
        self.is_open = false;
        posix::close_file(self.fd);
    }

    func read.File(buffer : []byte){
      let read_count = posix::read_file(self.fd, buffer.ptr, buffer.len); 
    }

    func from_descriptor( fd : u32 ) -> File{
        return File{
            fd : fd;
            is_open : true;
        };
    }

    func stats.File() -> posix::FileStats{
      let stats_struct : posix::FileStats;
      let stat = posix::file_stat(self.fd, &stats_struct);
      if(stat < 0){
        Err::panic("stat failed");
      }
      return stats_struct;
    }

    func seek_start.File() -> u64{
      return posix::seek_file(self.fd, 0, posix::SEEK_SET) as u64;
    }
    func seek_end.File() -> u64{
      return posix::seek_file(self.fd, 0, posix::SEEK_END) as u64;
    }
    func current_pos.File() -> u64{
      let pos = posix::seek_file(self.fd, 0, posix::SEEK_CUR);
      return pos as u64;
    }
    func size.File() -> u64{
      let s = self.stats();
      let len = s.size;
      if(len < 0){
        Err::panic("Bad file length");
      }
      return len as u64;
    }

}
