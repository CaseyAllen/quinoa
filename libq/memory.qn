import @lang::internal::error as Err;

module Memory is Exported{

    #[link_extern "malloc"]
    func malloc_unsafe(size : u64) -> byte*;

    #[link_extern "realloc"]
    func realloc_unsafe(ptr : byte*, new_size : u64) -> byte*;

    func malloc<T>(length : u64) -> T*{

        let result = malloc_unsafe(@size_of::<T>() * length); 
        if((result as u64) == 0){
            Err::panic("Failed memory allocation");
        }

        return result as T*;
    }

    func realloc<T>(ptr : T*, new_size : u64) -> T*{


        let result = realloc_unsafe(ptr as byte*, new_size * @size_of::<T>()) as T*;

        if((result as u64) == 0){
            Err::panic("Failed memory reallocation");
        }
        return result;
    }

    func alloc<T>() -> T*{

        return malloc::<T>(1);
    }

    func alloc<T>(size : u64) -> T[]{
        let allocation = malloc::<T>(size);

        let slice = @make_slice::<T>(allocation, size);

        return slice;
    }

    func resize<T>(current_slice : T[], new_len : u64) -> T[] {

        T* new = realloc::<T>(current_slice.ptr, new_len);

        let slc = @make_slice::<T>( new, new_len );

        return slc;
    }
}
