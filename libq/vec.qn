import @memory;
import @lang::internal::error as Err;
module Vector is Exported{

  type _<T> = struct{
    length     : u64;
    allocation : []T;
  };

    func new<T>(size : u64) -> Vector<T>{
      let alloc = memory::alloc::<T>(size);

      return Vector::<T>{
        length : 0;
        allocation: alloc;
      };
    }

    func len.Vector<T>() -> u64{
      return self.length;
    }

    func resize.Vector<T>(size : u64){
      if(size > self.allocation.len){
        self.resize_grow(size - self.allocation.len);
      }
      else{
        if(size < self.allocation.len){
          self.resize_shrink(self.allocation.len - size);
        }
      }
    }

    func resize_grow.Vector<T>(by : u64){
      // Grow at a rate of 2n 
      let new_size = self.length + by;

      if(new_size <= self.allocation.len){
        self.length = new_size;
      }
      else{
        let new_alloc_size = new_size * 2;

        let new_alloc = memory::resize::<T>(self.allocation, new_alloc_size);
        self.allocation = new_alloc;
        self.length = new_size;
      }
    }
    func resize_shrink.Vector<T>(by : u64){

    }
  
    func append.Vector<T>(val : T){
      self.resize_grow(1);
      self.allocation[self.length - 1] = val;
    }

    func index.Vector<T>(idx : u64) -> T{
      // ensure idx is within the bounds of the array
      if(idx >= self.len()){
        Err::panic("Vector access index out of bounds");
      }
      return self.allocation[idx];
    }
}
