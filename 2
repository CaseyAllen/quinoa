; ModuleID = 'Quinoa Program'
source_filename = "Quinoa Program"
target triple = "x86_64-pc-linux-gnu"

%0 = type { i64, [0 x i8]* }
%1 = type { %0, i64 }

@.print = private constant [13 x i8] c"Hello, World!"
@.print.3 = private constant [8 x i8] c"make str"
@.print.2 = private constant [74 x i8] c"Failed to copy bytes from string: target slice smaller than string content"
@0 = private unnamed_addr constant [81 x i8] c"\1B[0;31mERROR:\1B[0;0m Array subscript out of bounds\0A\09for expression 'slice[idx]'\0A\0A\00", align 1
@1 = private unnamed_addr constant [91 x i8] c"\1B[0;31mERROR:\1B[0;0m Array subscript out of bounds\0A\09for expression 'self.allocation[idx]'\0A\0A\00", align 1
@.print.10 = private constant [24 x i8] c"Failed memory allocation"
@.print.13 = private constant [20 x i8] c"\1B[0;31mpanic: \1B[0;0m"
@"IO::stdout" = linkonce global i32 1

define i32 @main() {
entry_block:
  %cstr = alloca %0, align 8
  %message = alloca %1, align 8
  %0 = alloca %1, align 8
  %.tmp = alloca %0, align 8
  %1 = getelementptr inbounds %0, %0* %.tmp, i32 0, i32 0
  %2 = getelementptr inbounds %0, %0* %.tmp, i32 0, i32 1
  store i64 13, i64* %1, align 4
  store [0 x i8]* bitcast ([13 x i8]* @.print to [0 x i8]*), [0 x i8]** %2, align 8
  %3 = load %0, %0* %.tmp, align 8
  call void @"ivrt::String::from.i8[]"(%1* %0, %0 %3)
  %4 = load %1, %1* %0, align 8
  store %1 %4, %1* %message, align 8
  %5 = alloca %0, align 8
  call void @"ivrt::String::to_cstr"(%0* %5, %1* %message)
  %6 = load %0, %0* %5, align 8
  store %0 %6, %0* %cstr, align 8
  %7 = call i64 @"ivrt::String::len"(%1* %message)
  %8 = trunc i64 %7 to i32
  ret i32 %8
}

define void @"ivrt::String::from.i8[]"(%1* %0, %0 %data) {
entry_block:
  %data1 = alloca %0, align 8
  store %0 %data, %0* %data1, align 8
  %S = alloca %1, align 8
  %raw_bytes = alloca %0, align 8
  %.tmp = alloca %0, align 8
  %1 = getelementptr inbounds %0, %0* %.tmp, i32 0, i32 0
  %2 = getelementptr inbounds %0, %0* %.tmp, i32 0, i32 1
  store i64 8, i64* %1, align 4
  store [0 x i8]* bitcast ([8 x i8]* @.print.3 to [0 x i8]*), [0 x i8]** %2, align 8
  %3 = load %0, %0* %.tmp, align 8
  %4 = call i64 @"zZjW::IO::println.i8[]"(%0 %3)
  %5 = alloca %0, align 8
  %6 = getelementptr inbounds %0, %0* %data1, i32 0, i32 0
  %7 = load i64, i64* %6, align 4
  call void @"4j1w::Memory::alloc<u8>.u64"(%0* %5, i64 %7)
  %8 = load %0, %0* %5, align 8
  store %0 %8, %0* %raw_bytes, align 8
  %.tmp2 = alloca %1, align 8
  %9 = load %0, %0* %raw_bytes, align 8
  %10 = getelementptr inbounds %1, %1* %.tmp2, i32 0, i32 0
  store %0 %9, %0* %10, align 8
  %11 = getelementptr inbounds %0, %0* %data1, i32 0, i32 0
  %12 = load i64, i64* %11, align 4
  %13 = getelementptr inbounds %1, %1* %.tmp2, i32 0, i32 1
  store i64 %12, i64* %13, align 4
  %14 = load %1, %1* %.tmp2, align 8
  store %1 %14, %1* %S, align 8
  %15 = load %1, %1* %S, align 8
  store %1 %15, %1* %0, align 8
  ret void
}

define void @"ivrt::String::to_cstr"(%0* %0, %1* %1) {
entry_block:
  %self = alloca %1*, align 8
  store %1* %1, %1** %self, align 8
  %allocation = alloca %0, align 8
  %2 = alloca %0, align 8
  %3 = load %1*, %1** %self, align 8
  %4 = getelementptr inbounds %1, %1* %3, i32 0, i32 1
  %5 = load i64, i64* %4, align 4
  %6 = add i64 %5, 1
  call void @"4j1w::Memory::alloc<u8>.u64"(%0* %2, i64 %6)
  %7 = load %0, %0* %2, align 8
  store %0 %7, %0* %allocation, align 8
  %8 = load %1*, %1** %self, align 8
  %9 = load %0, %0* %allocation, align 8
  call void @"ivrt::String::copy_bytes_into.u8[]"(%1* %8, %0 %9)
  ret void
}

define void @"ivrt::String::copy_bytes_into.u8[]"(%1* %0, %0 %slice) {
entry_block:
  %self = alloca %1*, align 8
  store %1* %0, %1** %self, align 8
  %slice1 = alloca %0, align 8
  store %0 %slice, %0* %slice1, align 8
  %idx = alloca i64, align 8
  %1 = getelementptr inbounds %0, %0* %slice1, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = load %1*, %1** %self, align 8
  %4 = getelementptr inbounds %1, %1* %3, i32 0, i32 1
  %5 = load i64, i64* %4, align 4
  %6 = icmp ult i64 %2, %5
  br i1 %6, label %if_true, label %if_cont

if_true:                                          ; preds = %entry_block
  %.tmp = alloca %0, align 8
  %7 = getelementptr inbounds %0, %0* %.tmp, i32 0, i32 0
  %8 = getelementptr inbounds %0, %0* %.tmp, i32 0, i32 1
  store i64 74, i64* %7, align 4
  store [0 x i8]* bitcast ([74 x i8]* @.print.2 to [0 x i8]*), [0 x i8]** %8, align 8
  %9 = load %0, %0* %.tmp, align 8
  call void @"8NYz::Error::panic.i8[]"(%0 %9)
  br label %if_cont

if_cont:                                          ; preds = %if_true, %entry_block
  store i64 0, i64* %idx, align 4
  br label %while_eval

while_eval:                                       ; preds = %bounds_check_cont3, %if_cont
  %10 = load i64, i64* %idx, align 4
  %11 = getelementptr inbounds %0, %0* %slice1, i32 0, i32 0
  %12 = load i64, i64* %11, align 4
  %13 = icmp ult i64 %10, %12
  br i1 %13, label %while_exec, label %while_cont

while_exec:                                       ; preds = %while_eval
  %14 = load i64, i64* %idx, align 4
  %15 = getelementptr inbounds %0, %0* %slice1, i32 0, i32 0
  %16 = load i64, i64* %15, align 4
  %17 = icmp slt i64 %14, %16
  br i1 %17, label %bounds_check_cont, label %bounds_check_err

while_cont:                                       ; preds = %while_eval
  ret void

bounds_check_err:                                 ; preds = %while_exec
  %18 = call i64 @write(i32 2, i64 ptrtoint ([81 x i8]* @0 to i64), i64 80)
  call void @abort()
  br label %bounds_check_cont

bounds_check_cont:                                ; preds = %bounds_check_err, %while_exec
  %19 = getelementptr inbounds %0, %0* %slice1, i32 0, i32 1
  %20 = load [0 x i8]*, [0 x i8]** %19, align 8
  %21 = getelementptr [0 x i8], [0 x i8]* %20, i64 0, i64 %14
  %22 = load %1*, %1** %self, align 8
  %23 = getelementptr inbounds %1, %1* %22, i32 0, i32 0
  %24 = load i64, i64* %idx, align 4
  %25 = getelementptr inbounds %0, %0* %23, i32 0, i32 0
  %26 = load i64, i64* %25, align 4
  %27 = icmp slt i64 %24, %26
  br i1 %27, label %bounds_check_cont3, label %bounds_check_err2

bounds_check_err2:                                ; preds = %bounds_check_cont
  %28 = call i64 @write(i32 2, i64 ptrtoint ([91 x i8]* @1 to i64), i64 90)
  call void @abort()
  br label %bounds_check_cont3

bounds_check_cont3:                               ; preds = %bounds_check_err2, %bounds_check_cont
  %29 = getelementptr inbounds %0, %0* %23, i32 0, i32 1
  %30 = load [0 x i8]*, [0 x i8]** %29, align 8
  %31 = getelementptr [0 x i8], [0 x i8]* %30, i64 0, i64 %24
  %32 = load i8, i8* %31, align 1
  store i8 %32, i8* %21, align 1
  %33 = load i64, i64* %idx, align 4
  %34 = add i64 %33, 1
  %35 = load i64, i64* %idx, align 4
  store i64 %34, i64* %idx, align 4
  br label %while_eval
}

declare i64 @write(i32, i64, i64)

declare void @abort()

define i64 @"ivrt::String::len"(%1* %0) {
entry_block:
  %self = alloca %1*, align 8
  store %1* %0, %1** %self, align 8
  %1 = load %1*, %1** %self, align 8
  %2 = getelementptr inbounds %1, %1* %1, i32 0, i32 1
  %3 = load i64, i64* %2, align 4
  ret i64 %3
}

define void @"4j1w::Memory::alloc<u8>.u64"(%0* %0, i64 %size) {
entry_block:
  %size1 = alloca i64, align 8
  store i64 %size, i64* %size1, align 4
  %slice = alloca %0, align 8
  %allocation = alloca i8*, align 8
  %1 = load i64, i64* %size1, align 4
  %2 = call i8* @"4j1w::Memory::malloc<u8>.u64"(i64 %1)
  store i8* %2, i8** %allocation, align 8
  %3 = load i8*, i8** %allocation, align 8
  %4 = load i64, i64* %size1, align 4
  %5 = alloca %0, align 8
  %6 = getelementptr inbounds %0, %0* %5, i32 0, i32 0
  %7 = getelementptr inbounds %0, %0* %5, i32 0, i32 1
  %8 = bitcast [0 x i8]** %7 to i8**
  store i64 %4, i64* %6, align 4
  store i8* %3, i8** %8, align 8
  %9 = load %0, %0* %5, align 8
  store %0 %9, %0* %slice, align 8
  %10 = load %0, %0* %slice, align 8
  store %0 %10, %0* %0, align 8
  ret void
}

define i8* @"4j1w::Memory::malloc<u8>.u64"(i64 %length) {
entry_block:
  %length1 = alloca i64, align 8
  store i64 %length, i64* %length1, align 4
  %result = alloca i8*, align 8
  %0 = load i64, i64* %length1, align 4
  %1 = mul i64 1, %0
  %2 = call i8* @malloc(i64 %1)
  store i8* %2, i8** %result, align 8
  %3 = load i8*, i8** %result, align 8
  %4 = ptrtoint i8* %3 to i64
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if_true, label %if_cont

if_true:                                          ; preds = %entry_block
  %.tmp = alloca %0, align 8
  %6 = getelementptr inbounds %0, %0* %.tmp, i32 0, i32 0
  %7 = getelementptr inbounds %0, %0* %.tmp, i32 0, i32 1
  store i64 24, i64* %6, align 4
  store [0 x i8]* bitcast ([24 x i8]* @.print.10 to [0 x i8]*), [0 x i8]** %7, align 8
  %8 = load %0, %0* %.tmp, align 8
  call void @"8NYz::Error::panic.i8[]"(%0 %8)
  br label %if_cont

if_cont:                                          ; preds = %if_true, %entry_block
  %9 = load i8*, i8** %result, align 8
  ret i8* %9
}

declare i8* @malloc(i64)

define void @"8NYz::Error::panic.i8[]"(%0 %message) {
entry_block:
  %message1 = alloca %0, align 8
  store %0 %message, %0* %message1, align 8
  %.tmp = alloca %0, align 8
  %0 = getelementptr inbounds %0, %0* %.tmp, i32 0, i32 0
  %1 = getelementptr inbounds %0, %0* %.tmp, i32 0, i32 1
  store i64 20, i64* %0, align 4
  store [0 x i8]* bitcast ([20 x i8]* @.print.13 to [0 x i8]*), [0 x i8]** %1, align 8
  %2 = load %0, %0* %.tmp, align 8
  %3 = call i64 @"zZjW::IO::print.i8[]"(%0 %2)
  %4 = load %0, %0* %message1, align 8
  %5 = call i64 @"zZjW::IO::println.i8[]"(%0 %4)
  call void @exit(i8 22)
  ret void
}

declare void @exit(i8)

define void @"zZjW::IO::putc.i8"(i8 %ch) {
entry_block:
  %ch1 = alloca i8, align 1
  store i8 %ch, i8* %ch1, align 1
  %0 = load i32, i32* @"IO::stdout", align 4
  %1 = ptrtoint i8* %ch1 to i64
  %2 = load i32, i32* @"IO::stdout", align 4
  %3 = zext i32 %2 to i64
  %4 = call i64 @write(i32 %0, i64 %1, i64 %3)
  ret void
}

define i64 @"zZjW::IO::print.i8[]"(%0 %message) {
entry_block:
  %message1 = alloca %0, align 8
  store %0 %message, %0* %message1, align 8
  %len = alloca i64, align 8
  %0 = load i32, i32* @"IO::stdout", align 4
  %1 = getelementptr inbounds %0, %0* %message1, i32 0, i32 1
  %2 = load [0 x i8]*, [0 x i8]** %1, align 8
  %3 = ptrtoint [0 x i8]* %2 to i64
  %4 = getelementptr inbounds %0, %0* %message1, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = call i64 @write(i32 %0, i64 %3, i64 %5)
  store i64 %6, i64* %len, align 4
  %7 = load i64, i64* %len, align 4
  ret i64 %7
}

define i64 @"zZjW::IO::println.i8[]"(%0 %message) {
entry_block:
  %message1 = alloca %0, align 8
  store %0 %message, %0* %message1, align 8
  %len = alloca i64, align 8
  %0 = load %0, %0* %message1, align 8
  %1 = call i64 @"zZjW::IO::print.i8[]"(%0 %0)
  store i64 %1, i64* %len, align 4
  call void @"zZjW::IO::putc.i8"(i8 10)
  %2 = load i64, i64* %len, align 4
  %3 = add i64 %2, 1
  ret i64 %3
}
